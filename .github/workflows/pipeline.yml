name: pipeline

# what triggers pipeline?
on:
  push # for testing

#  pull_request:
#   branches: main
    
# what are the user credentials    
env:
  docker_username: ${{ github.actor }}
  docker_password: ${{ secrets.GITHUB_TOKEN }}
  GIT_COMMIT: ${{ github.sha }}

jobs:
# 1) run go test
  go-test:
    runs-on: ubuntu-latest
    steps:
      - name: checkout
        uses: actions/checkout@v3

      - name: install gcc #copy from slack
        run:  sudo apt update && sudo apt install -y gcc

      - name: run go test
        working-directory: frontend
        run: go test

        
# 2) store artifact
  upload-artifact:
    name: upload artifact
    runs-on: ubuntu-latest
    steps:
      - name: checkout
        uses: actions/checkout@v3
      - name: upload
        uses: actions/upload-artifact@v3
        with:
          name: code
          path: . 

          
# 3) upload frontend, artifact must be uploaded before this step
  docker-frontend: 
    runs-on: ubuntu-latest
    needs: [upload-artifact]
    permissions:
      packages: write
    steps:
      - name: download
        uses: actions/download-artifact@v3
        with:
          name: code
          path: .
      - name: build frontend docker
        run: chmod +x ci/build-frontend.sh && ci/build-frontend.sh
      - name: push frontend
        run: chmod +x ci/push-frontend.sh && ci/push-frontend.sh

# 4) upload backend, artifact must be uploaded before this step
  docker-backend: 
    runs-on: ubuntu-latest
    needs: [upload-artifact]
    permissions:
      packages: write
    steps:
      - name: download code
        uses: actions/download-artifact@v3
        with:
          name: code
          path: .
      - name: build backend docker
        run: chmod +x ci/build-backend.sh && ci/build-backend.sh
      - name: push backend docker
        run: chmod +x ci/push-backend.sh && ci/push-backend.sh


# 5) finally: run cluster
  cluster:
    runs-on: ubuntu-latest
    needs: [docker-backend, docker-frontend]
    steps:
      - name: checkout
        uses: actions/checkout@v3
      
      - name: add kubefconfig file
        run: echo "${{ secrets.KUBECONFIG_TEST }}" | base64 -d > kubeconfig

      - name: deploy
        working-directory: k8s/
        run: kubectl --kubeconfig kubeconfig apply -f .










          
